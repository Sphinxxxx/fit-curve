/*
  JavaScript implementation of
  Algorithm for Automatically Fitting Digitized Curves
  by Philip J. Schneider
  "Graphics Gems", Academic Press, 1990

  The MIT License (MIT)

  Original (C):
      https://github.com/erich666/GraphicsGems/blob/master/gems/FitCurves.c
  -> Python:
      https://github.com/volkerp/fitCurves
  -> CoffeeScript/JavaScript + math.js/lodash:
      https://github.com/soswow/fit-curves
  -> JavaScript (ES6-ish), no dependencies
      https://github.com/Sphinxxxx/fit-curve
*/
(function(u,m){"function"===typeof define&&define.amd?define([],m):"object"===typeof module&&module.exports?module.exports=m():u.fitCurve=m()})(this,function(){function u(a,e){if(!(a instanceof e))throw new TypeError("Cannot call a class as a function");}function m(a,e,f,c){var h,k,g,d,l;if(2===a.length)return c=b.vectorLen(b.subtract(a[0],a[1]))/3,h=[a[0],b.addArrays(a[0],b.mulItems(e,c)),b.addArrays(a[1],b.mulItems(f,c)),a[1]],[h];k=x(a);h=v(a,k,e,f);d=w(a,h,k);g=d[0];d=d[1];if(g<c)return[h];if(g<
c*c)for(l=0;20>l;l++)if(k=y(h,a,k),h=v(a,k,e,f),d=w(a,h,k),g=d[0],d=d[1],g<c)return[h];g=[];h=b.normalize(b.subtract(a[d-1],a[d+1]));g=g.concat(m(a.slice(0,d+1),e,h,c));return g=g.concat(m(a.slice(d),b.mulItems(h,-1),f,c))}function v(a,e,f,c){var h,k,g,d,l,n,m,p,q=a[0],r=a[a.length-1];h=[q,null,null,r];k=b.zeros_Xx2x2(e.length);n=0;for(m=e.length;n<m;n++)p=e[n],d=1-p,g=k[n],g[0]=b.mulItems(f,3*p*d*d),g[1]=b.mulItems(c,3*d*p*p);d=[[0,0],[0,0]];l=[0,0];n=0;for(m=a.length;n<m;n++)p=e[n],g=k[n],d[0][0]+=
b.dot(g[0],g[0]),d[0][1]+=b.dot(g[0],g[1]),d[1][0]+=b.dot(g[0],g[1]),d[1][1]+=b.dot(g[1],g[1]),p=b.subtract(a[n],t.q([q,q,r,r],p)),l[0]+=b.dot(g[0],p),l[1]+=b.dot(g[1],p);a=d[0][0]*d[1][1]-d[1][0]*d[0][1];e=d[0][0]*l[1]-d[1][0]*l[0];d=l[0]*d[1][1]-l[1]*d[0][1];d=0===a?0:d/a;l=0===a?0:e/a;e=b.vectorLen(b.subtract(q,r));a=1E-6*e;d<a||l<a?(h[1]=b.addArrays(q,b.mulItems(f,e/3)),h[2]=b.addArrays(r,b.mulItems(c,e/3))):(h[1]=b.addArrays(q,b.mulItems(f,d)),h[2]=b.addArrays(r,b.mulItems(c,l)));return h}function y(a,
e,f){return f.map(function(f,h){var k=e[h],g=b.subtract(t.q(a,f),k),d=t.qprime(a,f),k=b.mulMatrix(g,d),g=b.sum(b.addItems(b.squareItems(d),b.mulMatrix(g,t.qprimeprime(a,f))));return 0===g?f:f-k/g})}function x(a){var e=[],f,c,h;a.forEach(function(a,g){f=g?c+b.vectorLen(b.subtract(a,h)):0;e.push(f);c=f;h=a});return e=e.map(function(e){return e/c})}function w(a,e,f){var c,h,k,g,d,l;h=0;k=a.length/2;g=0;for(d=a.length;g<d;g++)c=a[g],l=f[g],c=b.subtract(t.q(e,l),c),c=c[0]*c[0]+c[1]*c[1],c>h&&(h=c,k=g);
return[h,k]}var b=function(){function a(){u(this,a)}a.zeros_Xx2x2=function(e){for(var a=[];e--;)a.push([0,0]);return a};a.mulItems=function(e,a){return[e[0]*a,e[1]*a]};a.mulMatrix=function(e,a){return e[0]*a[0]+e[1]*a[1]};a.subtract=function(e,a){return[e[0]-a[0],e[1]-a[1]]};a.addArrays=function(a,b){return[a[0]+b[0],a[1]+b[1]]};a.addItems=function(a,b){return[a[0]+b,a[1]+b]};a.sum=function(a){return a.reduce(function(a,e){return a+e})};a.dot=function(e,b){return a.mulMatrix(e,b)};a.vectorLen=function(a){var b=
a[0];a=a[1];return Math.sqrt(b*b+a*a)};a.divItems=function(a,b){return[a[0]/b,a[1]/b]};a.squareItems=function(a){var b=a[0];a=a[1];return[b*b,a*a]};a.normalize=function(a){return this.divItems(a,this.vectorLen(a))};return a}(),t=function(){function a(){u(this,a)}a.q=function(a,f){var c=1-f,h=b.mulItems(a[0],c*c*c),k=b.mulItems(a[1],3*c*c*f),c=b.mulItems(a[2],3*c*f*f),g=b.mulItems(a[3],f*f*f);return b.addArrays(b.addArrays(h,k),b.addArrays(c,g))};a.qprime=function(a,f){var c=1-f,h=b.mulItems(b.subtract(a[1],
a[0]),3*c*c),c=b.mulItems(b.subtract(a[2],a[1]),6*c*f),k=b.mulItems(b.subtract(a[3],a[2]),3*f*f);return b.addArrays(b.addArrays(h,c),k)};a.qprimeprime=function(a,f){return b.addArrays(b.mulItems(b.addArrays(b.subtract(a[2],b.mulItems(a[1],2)),a[0]),6*(1-f)),b.mulItems(b.addArrays(b.subtract(a[3],b.mulItems(a[2],2)),a[1]),6*f))};return a}();return function(a,e){var f=a.length,c=b.normalize(b.subtract(a[1],a[0])),f=b.normalize(b.subtract(a[f-2],a[f-1]));return m(a,c,f,e)}});