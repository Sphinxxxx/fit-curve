/*
  JavaScript implementation of
  Algorithm for Automatically Fitting Digitized Curves
  by Philip J. Schneider
  "Graphics Gems", Academic Press, 1990

  The MIT License (MIT)

  Original (C):
      https://github.com/erich666/GraphicsGems/blob/master/gems/FitCurves.c
  -> Python:
      https://github.com/volkerp/fitCurves
  -> CoffeeScript/JavaScript + math.js/lodash:
      https://github.com/soswow/fit-curves
  -> JavaScript (ES6-ish), no dependencies
      https://github.com/Sphinxxxx/fit-curve
*/
(function(u,m){"function"===typeof define&&define.amd?define([],m):"object"===typeof module&&module.exports?module.exports=m():u.fitCurve=m()})(this,function(){function u(a,g){if(!(a instanceof g))throw new TypeError("Cannot call a class as a function");}function m(a,g,d,e){var h,k,f,c,l;if(2===a.length)return e=b.vectorLen(b.subtract(a[0],a[1]))/3,h=[a[0],b.addArrays(a[0],b.mulItems(g,e)),b.addArrays(a[1],b.mulItems(d,e)),a[1]],[h];k=x(a);h=v(a,k,g,d);c=w(a,h,k);f=c[0];c=c[1];if(f<e)return[h];if(f<
e*e)for(l=0;20>l;l++)if(k=y(h,a,k),h=v(a,k,g,d),c=w(a,h,k),f=c[0],c=c[1],f<e)return[h];h=[];f=b.subtract(a[c-1],a[c+1]);f[0]||f[1]?(f=b.normalize(f),l=b.mulItems(f,-1)):(f=b.normalize(b.subtract(a[c-1],a[c])),l=b.normalize(b.subtract(a[c+1],a[c])));h=h.concat(m(a.slice(0,c+1),g,f,e));return h=h.concat(m(a.slice(c),l,d,e))}function v(a,g,d,e){var h,k,f,c,l,n,m,p,q=a[0],r=a[a.length-1];h=[q,null,null,r];k=b.zeros_Xx2x2(g.length);n=0;for(m=g.length;n<m;n++)p=g[n],c=1-p,f=k[n],f[0]=b.mulItems(d,3*p*c*
c),f[1]=b.mulItems(e,3*c*p*p);c=[[0,0],[0,0]];l=[0,0];n=0;for(m=a.length;n<m;n++)p=g[n],f=k[n],c[0][0]+=b.dot(f[0],f[0]),c[0][1]+=b.dot(f[0],f[1]),c[1][0]+=b.dot(f[0],f[1]),c[1][1]+=b.dot(f[1],f[1]),p=b.subtract(a[n],t.q([q,q,r,r],p)),l[0]+=b.dot(f[0],p),l[1]+=b.dot(f[1],p);a=c[0][0]*c[1][1]-c[1][0]*c[0][1];g=c[0][0]*l[1]-c[1][0]*l[0];c=l[0]*c[1][1]-l[1]*c[0][1];c=0===a?0:c/a;l=0===a?0:g/a;g=b.vectorLen(b.subtract(q,r));a=1E-6*g;c<a||l<a?(h[1]=b.addArrays(q,b.mulItems(d,g/3)),h[2]=b.addArrays(r,b.mulItems(e,
g/3))):(h[1]=b.addArrays(q,b.mulItems(d,c)),h[2]=b.addArrays(r,b.mulItems(e,l)));return h}function y(a,g,d){return d.map(function(d,h){var k=g[h],f=b.subtract(t.q(a,d),k),c=t.qprime(a,d),k=b.mulMatrix(f,c),f=b.sum(b.addItems(b.squareItems(c),b.mulMatrix(f,t.qprimeprime(a,d))));return 0===f?d:d-k/f})}function x(a){var g=[],d,e,h;a.forEach(function(a,f){d=f?e+b.vectorLen(b.subtract(a,h)):0;g.push(d);e=d;h=a});return g=g.map(function(g){return g/e})}function w(a,g,d){var e,h,k,f,c,l;h=0;k=a.length/2;
f=0;for(c=a.length;f<c;f++)e=a[f],l=d[f],e=b.subtract(t.q(g,l),e),e=e[0]*e[0]+e[1]*e[1],e>h&&(h=e,k=f);return[h,k]}var b=function(){function a(){u(this,a)}a.zeros_Xx2x2=function(g){for(var a=[];g--;)a.push([0,0]);return a};a.mulItems=function(g,a){return[g[0]*a,g[1]*a]};a.mulMatrix=function(g,a){return g[0]*a[0]+g[1]*a[1]};a.subtract=function(a,b){return[a[0]-b[0],a[1]-b[1]]};a.addArrays=function(a,b){return[a[0]+b[0],a[1]+b[1]]};a.addItems=function(a,b){return[a[0]+b,a[1]+b]};a.sum=function(a){return a.reduce(function(a,
b){return a+b})};a.dot=function(b,d){return a.mulMatrix(b,d)};a.vectorLen=function(a){var b=a[0];a=a[1];return Math.sqrt(b*b+a*a)};a.divItems=function(a,b){return[a[0]/b,a[1]/b]};a.squareItems=function(a){var b=a[0];a=a[1];return[b*b,a*a]};a.normalize=function(a){return this.divItems(a,this.vectorLen(a))};return a}(),t=function(){function a(){u(this,a)}a.q=function(a,d){var e=1-d,h=b.mulItems(a[0],e*e*e),k=b.mulItems(a[1],3*e*e*d),e=b.mulItems(a[2],3*e*d*d),f=b.mulItems(a[3],d*d*d);return b.addArrays(b.addArrays(h,
k),b.addArrays(e,f))};a.qprime=function(a,d){var e=1-d,h=b.mulItems(b.subtract(a[1],a[0]),3*e*e),e=b.mulItems(b.subtract(a[2],a[1]),6*e*d),k=b.mulItems(b.subtract(a[3],a[2]),3*d*d);return b.addArrays(b.addArrays(h,e),k)};a.qprimeprime=function(a,d){return b.addArrays(b.mulItems(b.addArrays(b.subtract(a[2],b.mulItems(a[1],2)),a[0]),6*(1-d)),b.mulItems(b.addArrays(b.subtract(a[3],b.mulItems(a[2],2)),a[1]),6*d))};return a}();return function(a,g){var d=a.length,e=b.normalize(b.subtract(a[1],a[0])),d=
b.normalize(b.subtract(a[d-2],a[d-1]));return m(a,e,d,g)}});
